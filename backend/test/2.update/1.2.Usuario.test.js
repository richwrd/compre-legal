import assert from 'assert';
import UsuarioController from '../../src/controllers/UsuarioController.js';
import UsuarioModel from '../../src/models/UsuarioModel.js';


// Fun√ß√£o para buscar o ID do usu√°rio pelo nome no banco de dados
async function buscarIdUsuarioPorNome(nomeUsuario) {
  try {
    // Use seu m√©todo de acesso ao banco de dados para buscar o ID pelo nome
    const usuario = await UsuarioModel.findOne({ nome: nomeUsuario });
    if (usuario) {
      return usuario._id; // Retorna o ID se o usu√°rio for encontrado
    } else {
      return null; // Retorna null se o usu√°rio n√£o for encontrado
    }
  } catch (error) {
    console.error('Erro ao buscar ID do usu√°rio:', error);
    throw error;
  }
}


describe('üì¶ PUT', () => {
  describe('#editUsuarioPost()\n        usuario/:id', () => {
    it('Deve editar um usu√°rio existente', async () => {
    
      // Nome do usu√°rio p/ teste
      const nomeUsuario = 'TesteUser';

      // Busca o ID do usu√°rio pelo nome
      const idUsuario = await buscarIdUsuarioPorNome(nomeUsuario);

      // Suponha que voc√™ tenha os novos dados para atualiza√ß√£o do usu√°rio
      const dadosAtualizados = {
        nome: 'TesteUserUpdated',
        sobrenome: 'Mocha',
        idade: 35,
        imagem: 'nova_imagem.jpg'
      };

      // Criando uma requisi√ß√£o falsa com os par√¢metros necess√°rios
      const req = {
        params: { id: idUsuario },
        body: dadosAtualizados
      };

      const res = {
        statusCode: null,
        jsonData: null,
        status(code) {
          this.statusCode = code;
          return this;
        },
        json(data) {
          this.jsonData = data;
        }
      };
      
      // Chamando a fun√ß√£o do controlador para editar o usu√°rio
      await UsuarioController.editUsuarioPost(req, res);

      // Verificando se a resposta foi enviada corretamente
      assert.strictEqual(res.statusCode, 200); // Verifica se o status √© 200 (OK)

      // Verificando se o usu√°rio foi atualizado no banco de dados
      const usuarioAtualizado = await UsuarioModel.findById(idUsuario);
      assert.strictEqual(usuarioAtualizado.nome, dadosAtualizados.nome); // Verifica se o nome foi atualizado corretamente
      assert.strictEqual(usuarioAtualizado.sobrenome, dadosAtualizados.sobrenome); // Verifica se o sobrenome foi atualizado corretamente
      assert.strictEqual(usuarioAtualizado.idade, dadosAtualizados.idade); // Verifica se a idade foi atualizada corretamente
      assert.strictEqual(usuarioAtualizado.imagem, dadosAtualizados.imagem); 
    });
  });
});


